(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{356:function(t,s,a){"use strict";a.r(s);var n=a(23),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本章介绍了 Groovy 的面向对象特性。")]),t._v(" "),a("h2",{attrs:{id:"_1-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类型"}},[t._v("#")]),t._v(" 1. 类型")]),t._v(" "),a("h3",{attrs:{id:"_1-1-基本类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-基本类型"}},[t._v("#")]),t._v(" 1.1 基本类型")]),t._v(" "),a("p",[t._v("Groovy 支持与 Java 语言规范所定义的相同的基本类型：")]),t._v(" "),a("ul",[a("li",[t._v("整数类型："),a("code",[t._v("byte")]),t._v("(8 位),"),a("code",[t._v("short")]),t._v("(16 位),"),a("code",[t._v("int")]),t._v("(32位)和"),a("code",[t._v("long")]),t._v("(64 位)")]),t._v(" "),a("li",[t._v("浮点数类型："),a("code",[t._v("float")]),t._v("(32 位)和"),a("code",[t._v("double")]),t._v("(64 位)")]),t._v(" "),a("li",[a("code",[t._v("boolean")]),t._v("类型（"),a("code",[t._v("true")]),t._v("和"),a("code",[t._v("false")]),t._v("）")]),t._v(" "),a("li",[a("code",[t._v("char")]),t._v("类型(16 位，可作为数字类型使用，代表 UTF-16 编码。)")])]),t._v(" "),a("p",[t._v("虽然 Groovy 将基本字段和变量声明并存储为基元，但由于它使用 Objects 来处理所有事情，所以它对基元的引用进行了自动包装。就像 Java 一样，它使用的包装类是：")]),t._v(" "),a("p",[t._v("表 1. 基本类型包装类")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("基本类型")]),t._v(" "),a("th",[t._v("包装类型")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("boolean")]),t._v(" "),a("td",[t._v("Boolean")])]),t._v(" "),a("tr",[a("td",[t._v("char")]),t._v(" "),a("td",[t._v("Character")])]),t._v(" "),a("tr",[a("td",[t._v("short")]),t._v(" "),a("td",[t._v("Short")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td",[t._v("Integer")])]),t._v(" "),a("tr",[a("td",[t._v("long")]),t._v(" "),a("td",[t._v("Long")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td",[t._v("Float")])]),t._v(" "),a("tr",[a("td",[t._v("double")]),t._v(" "),a("td",[t._v("Double")])])])]),t._v(" "),a("p",[t._v("下面是一个使用"),a("code",[t._v("int")]),t._v("的例子：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeclaredField")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'i'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("assert")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("\n")])])]),a("p",[t._v("现在您可能会担心，这意味着每次在一个基本类型的引用上使用数学运算符时，都会产生拆箱和装箱基本类型的成本。但事实并非如此，因为 Groovy 会将你的运算符编译成它们的方法等价物，并使用这些方法等价物。此外，当调用一个接受基本类型参数的 Java 方法时，Groovy 会自动拆箱到基本类型，并自动从 Java 中框定基元方法的返回值。但是，要注意与 Java 的方法解析有一些区别。")]),t._v(" "),a("h3",{attrs:{id:"_1-2-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-类"}},[t._v("#")]),t._v(" 1.2 类")]),t._v(" "),a("p",[t._v("Groovy 类与 Java 类非常相似，在 JVM 层面与 Java 类兼容。它们可以有方法、字段和属性（想想 JavaBean 的属性，但少了一些模板）。类和类成员可以拥有与 Java 中相同的修饰符（public、protected、private、static等），但在源码级别上有一些小的差异，这些差异将在下文解释。")]),t._v(" "),a("p",[t._v("Groovy类与Java类之间的主要区别是：")]),t._v(" "),a("ul",[a("li",[t._v("没有可见性修饰符的类或方法默认为 "),a("code",[t._v("public")]),t._v(" （可以使用特殊的注解来实现包的私有可见性）。")]),t._v(" "),a("li",[t._v("没有可见性修饰符的字段会自动变成属性，这就减少了代码的冗余，因为不需要明确的 getter 和 setter 方法。关于这方面的更多内容将在字段和属性部分介绍。")]),t._v(" "),a("li",[t._v("类不需要和它们的源文件定义有相同的名称，但在大多数情况下，还是建议用相同的名称（可以参考脚本相关内容）。")]),t._v(" "),a("li",[t._v("一个源文件可能包含一个或多个类（但如果一个文件包含任何不在类中的代码，它就被认为是一个脚本）。脚本只是一些特殊约定的类，其名称与源文件相同（所以不要在脚本中包含与脚本源文件名称相同的类定义）。")])]),t._v(" "),a("p",[t._v("下面的代码是一个例子：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n\n    String name                      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n    Integer age\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("increaseAge")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Integer years"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" years\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：名为"),a("code",[t._v("Person")]),t._v("的类开始")]),t._v(" "),a("li",[t._v("注释 2：名为"),a("code",[t._v("name")]),t._v("的 String 类型的属性")]),t._v(" "),a("li",[t._v("注释 3：方法定义")])]),t._v(" "),a("h4",{attrs:{id:"_1-2-1-普通类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-普通类"}},[t._v("#")]),t._v(" 1.2.1 普通类")]),t._v(" "),a("p",[t._v("普通类指的是顶层和具体的类，这意味着它们可以不受任何其他类或脚本的限制而被实例化。这样，它们只能是公共的（即使公共关键字可能被抑制）。类是通过调用它们的构造函数，使用new关键字来实例化的，就像下面的例子一样：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"_1-2-2-内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-内部类"}},[t._v("#")]),t._v(" 1.2.2 内部类")]),t._v(" "),a("p",[t._v("内类是在另一个类中定义的。外部类可以像平常一样使用内部类。另一方面，一个内部类可以访问它的外部类的成员，即使它们是私有的。除了包围类之外的其他类是不允许访问内类的。下面是一个例子。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Outer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String privateStr\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("callInnerMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("methodA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            println "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("privateStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('."')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：内部类被实例化，方法被调用")]),t._v(" "),a("li",[t._v("注释 2：内部类定义")]),t._v(" "),a("li",[t._v("注释  3：即使是私有的，外部类的字段也可以被内部类访问")])]),t._v(" "),a("p",[t._v("为什么要使用内部类：")]),t._v(" "),a("ul",[a("li",[t._v("有一些类不需要暴露出去，使用内部类将其封装起来，这也使得包和工作空间更加干净")]),t._v(" "),a("li",[t._v("内部类提供很好的组织性，可以实现分组的功能")]),t._v(" "),a("li",[t._v("内部类使代码可维护性增强，因为内部类通常就在他们被调用处的旁边")])]),t._v(" "),a("p",[t._v("在一些情况下，内部类是外部类需要其方法的接口的实现。下面的代码用常见的线程用法来说明这个问题：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Outer2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String privateStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some string'")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Inner2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            println "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("privateStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('."')]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("注意，定义"),a("code",[t._v("Inner2")]),t._v("类只是为了提供运行到"),a("code",[t._v("Outer2")]),t._v("类的方法的实现。在这种情况下，匿名内部类有助于消除啰嗦代码。")]),t._v(" "),a("p",[t._v("自 Groovy 3.0.0 以来，支持非静态内类实例化的 Java 语法，例如：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Computer")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cpu")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" coreNumber\n\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cpu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" coreNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coreNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" coreNumber\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Computer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cpu")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("coreNumber\n")])])]),a("h5",{attrs:{id:"匿名内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类"}},[t._v("#")]),t._v(" 匿名内部类")]),t._v(" "),a("p",[t._v("最后一个内类的例子可以用一个匿名内类来简化。同样的功能可以通过以下代码实现。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Outer3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" String privateStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some string'")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                println "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("privateStr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('."')]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：与上一节的最后一个例子相比，"),a("code",[t._v("new Inner2()")]),t._v("被 "),a("code",[t._v("new Runnable()")]),t._v("所取代。")]),t._v(" "),a("li",[t._v("注释 2："),a("code",[t._v("start")]),t._v("方法被调用")])]),t._v(" "),a("p",[t._v("因此，只使用一次的话，就没有必要定义一个新的类。")]),t._v(" "),a("h4",{attrs:{id:"_1-2-3-抽象类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-抽象类"}},[t._v("#")]),t._v(" 1.2.3 抽象类")]),t._v(" "),a("p",[t._v("抽象类代表通用概念，因此，它们不能被实例化，或被创建为子类。它们的成员包括字段/属性和抽象或具体方法。抽象方法没有实现，必须由具体的子类来实现。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n    String name\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("abstract")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("abstractMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concreteMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        println "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'concrete'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：抽象类必须使用"),a("code",[t._v("abstract")]),t._v("关键字声明")]),t._v(" "),a("li",[t._v("注释 2：抽象方法必须使用"),a("code",[t._v("abstract")]),t._v("关键字声明")])]),t._v(" "),a("p",[t._v("抽象类通常与接口进行比较。两者之间有重要的区别。首先，抽象类可能包含字段/属性和具体方法，而接口可能只包含抽象方法（方法签名）。此外，一个类可以实现多个接口，而它可以只扩展一个类，无论是否抽象。")]),t._v(" "),a("h3",{attrs:{id:"_1-3-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-接口"}},[t._v("#")]),t._v(" 1.3 接口")]),t._v(" "),a("p",[t._v("一个接口定义了一个类需要遵守的契约。一个接口只定义了一个需要实现的方法列表，但并没有定义方法的实现。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                                         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：需要使用接口关键字来声明一个接口")]),t._v(" "),a("li",[t._v("注释 2：一个接口只定义方法签名")])]),t._v(" "),a("p",[t._v("接口的方法必须是"),a("code",[t._v("public")]),t._v("的。在接口中不能使用"),a("code",[t._v("protected")]),t._v("或"),a("code",[t._v("private")])]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("protected")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：使用 "),a("code",[t._v("protected")]),t._v(" 会产生一个编译期错误")])]),t._v(" "),a("p",[t._v("如果一个类在它的实现列表中定义了接口，或者它的任何一个父类实现了接口，那么这个类就实现了一个接口。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemGreeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n        println "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Hello '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("name")]),t._v('"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SystemGreeter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1："),a("code",[t._v("SystemGreeter")]),t._v("使用"),a("code",[t._v("implements")]),t._v("关键字实现了"),a("code",[t._v("Greeter")]),t._v("接口")]),t._v(" "),a("li",[t._v("注释 2：实现"),a("code",[t._v("greet")]),t._v("方法")]),t._v(" "),a("li",[t._v("注释 3："),a("code",[t._v("SystemGreeter")]),t._v("的任何实例都是"),a("code",[t._v("Greeter")]),t._v("接口的实例。")])]),t._v(" "),a("p",[t._v("一个接口可以扩展另一个接口：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExtendedGreeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayBye")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1："),a("code",[t._v("ExtendedGreeter")]),t._v("接口使用"),a("code",[t._v("extends")]),t._v("关键字扩展了"),a("code",[t._v("Greeter")]),t._v("接口")])]),t._v(" "),a("p",[t._v("值得注意的是，一个类要成为一个接口的实例，必须是显式的。例如，下面这个类定义了"),a("code",[t._v("greet")]),t._v("方法，虽然它是在"),a("code",[t._v("Greeter")]),t._v("接口中声明的，但是这个类并没有实现Greeter：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultGreeter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" println "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ngreeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultGreeter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("换句话说，Groovy没有定义结构类型。然而，可以在运行时使用"),a("code",[t._v("as")]),t._v("转换符，让一个对象的实例实现一个接口：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DefaultGreeter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("                              "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\ncoerced "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" Greeter                                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" coerced "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Greeter")]),t._v("                           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：创建一个没有实现接口的"),a("code",[t._v("DefaultGreeter")]),t._v("类的实例")]),t._v(" "),a("li",[t._v("注释 2：在运行时将实例转换为一个"),a("code",[t._v("Greeter")])]),t._v(" "),a("li",[t._v("注释 3：被转换的实例实现了"),a("code",[t._v("Greeter")]),t._v("接口")])]),t._v(" "),a("p",[t._v("你可以看到，有两个不同的对象：一个是源对象，一个"),a("code",[t._v("DefaultGreeter")]),t._v("实例，它没有实现接口。另一个是委托给转换对象的"),a("code",[t._v("Greeter")]),t._v("实例。")]),t._v(" "),a("p",[t._v("Groovy 接口不像 Java 8接口那样支持默认实现。如果你正在寻找类似的东西（但不等于），traits 接近于接口，但允许默认实现以及本手册中描述的其他重要特性。")])])}),[],!1,null,null,null);s.default=e.exports}}]);