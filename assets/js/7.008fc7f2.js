(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{362:function(t,s,a){"use strict";a.r(s);var e=a(17),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本章介绍 Groovy 编程语言的语法。该语言的语法来源于 Java 语法，但用 Groovy 的特定结构对其进行了增强，并允许进行某些简化。")]),t._v(" "),a("h2",{attrs:{id:"_1-注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-注释"}},[t._v("#")]),t._v(" 1. 注释")]),t._v(" "),a("h3",{attrs:{id:"_1-1-单行注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-单行注释"}},[t._v("#")]),t._v(" 1.1. 单行注释")]),t._v(" "),a("p",[t._v("单行注释使用"),a("code",[t._v("//")]),t._v("。在"),a("code",[t._v("//")]),t._v("后面的字符，直到行尾，都被认为是注释的一部分。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这是单行注释")]),t._v("\nprintln "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这也是单行注释")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-2-多行注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-多行注释"}},[t._v("#")]),t._v(" 1.2 多行注释")]),t._v(" "),a("p",[t._v("多行注释以"),a("code",[t._v("/*")]),t._v("开头，"),a("code",[t._v("/*")]),t._v("后面的字符被视为注释的一部分，包括换行符，直到第一个"),a("code",[t._v("*/")]),t._v("结束注释。因此，多行注释可以放在语句的末尾，甚至可以放在语句内部。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 多行注释\n   可以跨越两行 */")]),t._v("\nprintln "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"hello"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 多行注释\n                   也可以放在行尾 */")]),t._v("\nprintln "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 一 */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 二 */")]),t._v("\n")])])]),a("h3",{attrs:{id:"_1-3-groovydoc-注释"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-groovydoc-注释"}},[t._v("#")]),t._v(" 1.3 Groovydoc 注释")]),t._v(" "),a("p",[t._v("与多行注释类似，Groovydoc 注释也是多行的，但以"),a("code",[t._v("/**")]),t._v("开始，以"),a("code",[t._v("*/")]),t._v("结束。在第一行 Groovydoc 注释之后的行可以选择以星号"),a("code",[t._v("*")]),t._v("开头。这些注释与以下内容相关联。")]),t._v(" "),a("ul",[a("li",[t._v("类型定义（classes, interfaces, enums, annotations）")]),t._v(" "),a("li",[t._v("变量和属性定义")]),t._v(" "),a("li",[t._v("方法定义")])]),t._v(" "),a("p",[t._v("即时你不写 Groovydoc 编译器也不会报错，但是出于代码规范的目的，你也应该在这些定义之前加上 Groovydoc 注释。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Class 描述\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** 一个人的名字 */")]),t._v("\n    String name\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * 向一个人问好\n     *\n     * @param otherPerson 需要问好的人\n     * @return 欢迎语\n     */")]),t._v("\n    String "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("greet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String otherPerson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Hello '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("otherPerson"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Groovydoc 与 Java 的 Javadoc 遵循相同的约定。所以你可以使用和 Javadoc 一样的标签。")]),t._v(" "),a("p",[t._v("此外，Groovy 从 3.0.0 开始支持 Runtime Groovydoc，即 Groovydoc 可以在运行时保留。")]),t._v(" "),a("p",[t._v("运行时 Groovydoc 默认是禁用的。可以通过添加 JVM 选项 "),a("code",[t._v("Dgroovy.attach.runtime.groovydoc=true")]),t._v("开启。")]),t._v(" "),a("p",[t._v("运行时 Groovydoc 以"),a("code",[t._v("/**@")]),t._v("开头，以"),a("code",[t._v("*/")]),t._v("结尾。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**@\n * Foo类的描述\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**@\n     * bar() 方法的描述\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groovydoc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Some class groovydoc for Foo'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groovydoc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("content"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Some method groovydoc for bar'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),a("ul",[a("li",[t._v("第 11 行：运行时获取 Foo 类的 Groovydoc")]),t._v(" "),a("li",[t._v("第 12 行：运行时获取 bar() 方法的 Groovydoc")])]),t._v(" "),a("h3",{attrs:{id:"_1-4-shebang-line"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-shebang-line"}},[t._v("#")]),t._v(" 1.4 Shebang Line")]),t._v(" "),a("p",[t._v("除了单行注释之外，还有一个特殊的注释，通常被 UNIX 系统理解为 Shebang Line，它允许脚本直接从命令行运行。前提是你已经安装了 Groovy 发行版，并且在 PATH 中配置了 Groovy。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang comment"}},[t._v("#!/usr/bin/env groovy")]),t._v("\nprintln "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Hello from the shebang line"')]),t._v("\n")])])]),a("p",[a("code",[t._v("#")]),t._v("字符必须是文件的第一个字符。任何缩进都会产生编译错误。")]),t._v(" "),a("blockquote",[a("p",[t._v("关于 Shebang，据说是来源于，Sharp 和 bang 两个单词的合并；Sharp 代表乐谱中的‘升号’，这个符号和‘井号’，长得一样；而 bang 这个词，则代表‘砰的一声’，之所以用它来表示‘！’，则是出自于漫画，因为漫画中，巨大声响后面都有个‘！’号。")])]),t._v(" "),a("h2",{attrs:{id:"_2-关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-关键字"}},[t._v("#")]),t._v(" 2. 关键字")]),t._v(" "),a("p",[t._v("下述列表是 Groovy 语言的所有关键字")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("as")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("assert")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("break")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("case")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("catch")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("class")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("const")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("continue")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("def")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("default")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("do")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("else")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("enum")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("extends")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("finally")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("for")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("goto")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("if")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("implents")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("import")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("in")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("instanceof")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("interface")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("new")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("package")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("return")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("super")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("switch")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("this")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("throw")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("throws")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("trait")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("try")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("var")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("while")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td",{staticStyle:{"text-align":"center"}})])])]),t._v(" "),a("h2",{attrs:{id:"_3-标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-标识符"}},[t._v("#")]),t._v(" 3. 标识符")]),t._v(" "),a("h3",{attrs:{id:"_3-1-普通标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-普通标识符"}},[t._v("#")]),t._v(" 3.1 普通标识符")]),t._v(" "),a("p",[t._v("标识符以字母、``$"),a("code",[t._v("或")]),t._v("_`开头，不能以数字开头。")]),t._v(" "),a("p",[t._v("字母可在以下范围内：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("a")]),t._v(" to "),a("code",[t._v("z")]),t._v(" （小写 ascii 字符）")]),t._v(" "),a("li",[a("code",[t._v("A")]),t._v(" to "),a("code",[t._v("Z")]),t._v(" （大写 ascii 字符）")]),t._v(" "),a("li",[a("code",[t._v("\\u00C0")]),t._v(" to "),a("code",[t._v("\\u00D6")])]),t._v(" "),a("li",[a("code",[t._v("\\u00D8")]),t._v(" to "),a("code",[t._v("\\u00F6")])]),t._v(" "),a("li",[a("code",[t._v("\\u00F8")]),t._v(" to "),a("code",[t._v("\\u00FF")])]),t._v(" "),a("li",[a("code",[t._v("\\u0100")]),t._v(" to "),a("code",[t._v("\\uFFFE")])])]),t._v(" "),a("p",[t._v("字母之后的字符可以包含数字")]),t._v(" "),a("p",[t._v("下面是几个有效标识符的例子（在这里是变量名）：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" name\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" item3\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" with_underscore\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("dollarStart\n")])])]),a("p",[t._v("以下的都是无效的标识符：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" 3tier\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("b\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" a#b\n")])])]),a("p",[t._v("以"),a("code",[t._v(".")]),t._v("开头的标识符也是有效的：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v("\nfoo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v("\n")])])]),a("h3",{attrs:{id:"_3-2-引用标识符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-引用标识符"}},[t._v("#")]),t._v(" 3.2 引用标识符")]),t._v(" "),a("p",[t._v("引用标识符出现在"),a("code",[t._v(".")]),t._v("表达式后面，例如"),a("code",[t._v("person.name")]),t._v("表达式的"),a("code",[t._v("name")]),t._v("的部分可以使用"),a("code",[t._v("person.'name'")]),t._v("或者"),a("code",[t._v('person."name"')]),t._v("的表示。有个值得注意的地方是，一些在 Java 中不能使用的非法字符（例如破折号、空格、感叹号等字符）是可以在 Groovy 中使用的。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"an identifier with a space and double quotes"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ALLOWED"')]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'with-dash-signs-and-single-quotes'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ALLOWED"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"an identifier with a space and double quotes"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ALLOWED"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'with-dash-signs-and-single-quotes'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"ALLOWED"')]),t._v("\n")])])]),a("p",[t._v("正如我们在下面关于字符串的章节中所看到的，Groovy 提供了不同的字符串字元。实际上，所有类型的字符串都可以在点后使用。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'single quote'")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"double quote"')]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'''triple single quote'''")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"""triple double quote"""')]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/slashy string/")]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v("$/dollar slashy string/$")]),t._v("\n")])])]),a("p",[t._v("简单字符串和 Groovy 的 GStrings （插值字符串）是有区别的，因为在后者的情况下，内插值被插入到最终的字符串中，用于计算整个变量。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" firstname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Homer"')]),t._v("\nmap"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Simpson-'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("firstname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Homer Simpson"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Simpson-Homer'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Homer Simpson"')]),t._v("\n")])])]),a("h2",{attrs:{id:"_4-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-string"}},[t._v("#")]),t._v(" 4. String")]),t._v(" "),a("p",[t._v("文本以一串字符的形式表示，称为字符串。Groovy 允许你实例化"),a("code",[t._v("java.lang.String")]),t._v("对象，以及GStrings（"),a("code",[t._v("groovy.lang.GString")]),t._v("），GStrings 在其他编程语言中也被称为插值字符串。")]),t._v(" "),a("h3",{attrs:{id:"_4-1-单引号字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-单引号字符串"}},[t._v("#")]),t._v(" 4.1 单引号字符串")]),t._v(" "),a("p",[t._v("单引号字符串是由单引号包围的一系列字符：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'一个单引号字符串'")]),t._v("\n")])])]),a("p",[t._v("单引号字符串是普通的"),a("code",[t._v("java.lang.String")]),t._v("，不支持插值。")]),t._v(" "),a("h3",{attrs:{id:"_4-2-连接字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-连接字符串"}},[t._v("#")]),t._v(" 4.2 连接字符串")]),t._v(" "),a("p",[t._v("所有的 Groovy 字符串都可以用"),a("code",[t._v("+")]),t._v("操作符进行连接：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ab'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-3-三个单引号的字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-三个单引号的字符串"}},[t._v("#")]),t._v(" 4.3 三个单引号的字符串")]),t._v(" "),a("p",[t._v("三个单引号字符串是指由三个单引号包围的一系列字符。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'''这是一个三个单引号包围的字符串'''")]),t._v("\n")])])]),a("p",[t._v("三个单引号的字符串是普通的"),a("code",[t._v("java.lang.String")]),t._v("，不支持插值。")]),t._v(" "),a("p",[t._v("三个单引号的字符串可以跨越多行。字符串的内容可以跨越行边界，而不需要将字符串分割成几段，也不需要"),a("code",[t._v("+")]),t._v("连接或换行符：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" aMultilineString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'''第一行\n第二行\n第三行'''")]),t._v("\n")])])]),a("p",[t._v("如果你的代码有缩进，例如在一个类的方法体中，你的字符串将包含缩进的空白字符。GDK(Groovy Development Kit)  中包含了"),a("code",[t._v("String#stripIndent()")]),t._v("方法和"),a("code",[t._v("String#stripMargin()")]),t._v("方法，这两个方法可以去除缩进，"),a("code",[t._v("String#stripMargin()")]),t._v("方法使用一个定界符来标识需要从哪里开始删除字符串的空白字符。")]),t._v(" "),a("p",[t._v("当创建一个字符串时，如下所示：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" startingAndEndingWithANewline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'''\n第一行\n第二行\n第三行\n'''")]),t._v("\n")])])]),a("p",[t._v("你会注意到，生成的字符串包含一个换行符作为第一个字符。可以通过用反斜杠转义来删除该字符：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" strippedFirstNewline "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'''\\\n第一行\n第二行\n第三行\n'''")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("strippedFirstNewline"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("startsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h4",{attrs:{id:"_4-3-1-转义特殊字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-1-转义特殊字符"}},[t._v("#")]),t._v(" 4.3.1 转义特殊字符")]),t._v(" "),a("p",[t._v("你可以用反斜杠字符转义单引号，以避免被识别为字符串的边界：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'an escaped single quote: \\' needs a backslash'")]),t._v("\n")])])]),a("p",[t._v("还可以使用双斜杠来转义 转义字符 本身：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'an escaped escape character: \\\\ needs a double backslash'")]),t._v("\n")])])]),a("p",[t._v("一些特殊字符可以通过转义得到")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}}),t._v(" "),a("th",{staticStyle:{"text-align":"center"}})])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("转义字符")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("含义")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("注释")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\b")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("backspace")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("回退符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\f")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("formfeed")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("换页符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\n")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("newline")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("换行符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\r")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("carriage return")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("回车符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\s")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("single space")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("单引号")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\t")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("tabulation")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("制表符")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("backslash")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("斜杠")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("\\'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("single quote within a single-quoted string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("单引号字符串包含单引号时使用")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v('\\"')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("double quote within a double-quoted string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("双引号字符串包含双引号时使用")])])])]),t._v(" "),a("p",[t._v("当后面涉及到其他类型的字符串时，我们会看到一些更多的转义细节。")]),t._v(" "),a("h4",{attrs:{id:"_4-3-2-unicode-转义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-2-unicode-转义"}},[t._v("#")]),t._v(" 4.3.2 Unicode 转义")]),t._v(" "),a("p",[t._v("​\t对于键盘上没有的字符，你可以使用 Unicode 转义字符串。Unicode 格式是：一个反斜杠，后面是"),a("code",[t._v("u")]),t._v("，然后是4个十六进制数字。")]),t._v(" "),a("p",[t._v("例如，欧元货币符号可以用以下方式表示：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The Euro currency symbol: \\u20AC'")]),t._v("\n")])])]),a("h3",{attrs:{id:"_4-4-双引号字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-双引号字符串"}},[t._v("#")]),t._v(" 4.4 双引号字符串")]),t._v(" "),a("p",[t._v("双引号字符串是由双引号包围的一系列字符：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"a double-quoted string"')]),t._v("\n")])])]),a("p",[t._v("如果没有插值表达式，双引号字符串是普通的"),a("code",[t._v("java.lang.String")]),t._v("，但如果存在插值，则是"),a("code",[t._v("groovy.lang.GString")]),t._v("实例。")]),t._v(" "),a("p",[t._v("要转义双引号，可以使用反斜杠字符："),a("code",[t._v('"一个双引号字符: \\"".')])]),t._v(" "),a("h4",{attrs:{id:"_4-4-1-字符串插值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-1-字符串插值"}},[t._v("#")]),t._v(" 4.4.1 字符串插值")]),t._v(" "),a("p",[t._v("除了单引号和三引号字符串外，任何 Groovy 表达式都可以在所有字符串字面中进行插值。插值是指在计算字符串时，用其值替换字符串中的占位符的行为。占位符表达式由"),a("code",[t._v("${}")]),t._v("包围。对于不明确的点号表达式，大括号可以省略，也就是说，在这些情况下，我们可以只使用"),a("code",[t._v("$")]),t._v("前缀。如果 GString 被传递给一个取字符串的方法，占位符中的表达式值将被计算为其字符串表示形式（通过调用该表达式上的"),a("code",[t._v("oString()")]),t._v("），并将得到的字符串传递给该方法。")]),t._v(" "),a("p",[t._v("一个引用了本地变量的占位符字符串，如下所示：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a plain string")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Hello '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hello Guillaume'")]),t._v("\n")])])]),a("p",[t._v("任何Groovy表达式都是有效的，在这个例子中我们可以看到一个算术表达式：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"The sum of 2 and 3 equals '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The sum of 2 and 3 equals 5'")]),t._v("\n")])])]),a("p",[a("code",[t._v("${}")]),t._v("占位符之间除了可以使用表达式外，还可以使用语句。但是，语句的值会被计算为"),a("code",[t._v("null")]),t._v("。因此，如果在该占位符中插入了几个语句，最后一个语句应该以某种方式返回一个有意义的值来插入。例如，"),a("code",[t._v("1 和 2 之和等于 ${def a = 1; def b = 2; a + b}")]),t._v("是被支持的，并且可以正常工作，但是一个好的做法通常是在 GString 占位符中只使用简单的表达式。")]),t._v(" "),a("p",[t._v("除了"),a("code",[t._v("${}")]),t._v("占位符之外，我们还可以在点表达式前使用一个单独的 "),a("code",[t._v("$")]),t._v(" 符号：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name")]),t._v(" is "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age")]),t._v(' years old"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume is 36 years old'")]),t._v("\n")])])]),a("p",[t._v("但只有"),a("code",[t._v("a.b")]),t._v("、"),a("code",[t._v("a.b.c")]),t._v("等形式的点表达式才有效。包含小括号的表达式，如方法调用、用于闭合的大括号、不属于属性表达式的点或算术运算符都是无效的。以下给出一个数字的变量定义：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldFail")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MissingPropertyException"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    println "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString")]),t._v('()"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("$number.toString()")]),t._v("被解析器解释为"),a("code",[t._v("${number.toString}()")]),t._v("。")]),t._v(" "),a("p",[t._v("同样，如果表达方式有歧义，你需要保留大括号：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("String thing "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'treasure'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The x-coordinate of the treasure is represented by treasure.x'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"The x-coordinate of the '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("thing")]),t._v(" is represented by "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x")]),t._v('"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <= 不允许，因为有歧义")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The x-coordinate of the treasure is represented by treasure.x'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"The x-coordinate of the '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("thing")]),t._v(" is represented by "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("thing"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('.x"')]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// <= 必须保留大括号")]),t._v("\n")])])]),a("p",[t._v("如果你需要转义 GString 中的"),a("code",[t._v("$")]),t._v("或"),a("code",[t._v("${}")]),t._v("占位符，使它们能直接显示出来，你只需要使用一个反斜线字符来转义"),a("code",[t._v("$")]),t._v("符号：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$5'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"\\$5"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'${name}'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"\\${name}"')]),t._v("\n")])])]),a("h4",{attrs:{id:"_4-4-2-插值表达式的特殊情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-2-插值表达式的特殊情况"}},[t._v("#")]),t._v(" 4.4.2 插值表达式的特殊情况")]),t._v(" "),a("p",[t._v("到目前为止，我们已经看到我们可以在 "),a("code",[t._v("${}")]),t._v(" 占位符内插入任意表达式，但是闭包表达式有一个特殊的情况和符号。当占位符中包含一个箭头"),a("code",[t._v("${->}")]),t._v("时，该表达式实际上是一个闭包表达式。你可以把它看作是一个前面加了一个"),a("code",[t._v("$")]),t._v("符号的闭包：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" sParameterLessClosure "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"1 + 2 == '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" sParameterLessClosure "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 + 2 == 3'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" sOneParamClosure "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"1 + 2 == '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" w "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" w "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" sOneParamClosure "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1 + 2 == 3'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：该闭包是一个不接受参数的无参数闭包。")]),t._v(" "),a("li",[t._v("注释 2 ：在这里，闭包需要一个单一的"),a("code",[t._v("java.io.StringWriter")]),t._v("参数，你可以用"),a("code",[t._v("<<")]),t._v("操作符来追加内容。无论哪种情况，两个占位符都是嵌入式闭包。")])]),t._v(" "),a("p",[t._v("从表面上看，它像是用一种比较啰嗦的定义表达式的方式来进行插值，但闭包比单纯的表达式有一个重要的优势：惰性求值。")]),t._v(" "),a("p",[t._v("让我们看看以下例子：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" eagerGString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"value == '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" lazyGString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"value == '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" number "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" eagerGString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"value == 1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" lazyGString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"value == 1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n\nnumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" eagerGString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"value == 1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" lazyGString "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"value == 2"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 6")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：我们定义了一个值为 1 的 number 变量，然后在两个 GString 中进行插值，"),a("code",[t._v("eagerGString")]),t._v("使用普通表达式，"),a("code",[t._v("lazyGString")]),t._v("使用闭包表达式")]),t._v(" "),a("li",[t._v("注释 2 ：我们希望"),a("code",[t._v("eagerGString")]),t._v("中的"),a("code",[t._v("number")]),t._v("值为 1")]),t._v(" "),a("li",[t._v("注释 3 ：对 "),a("code",[t._v("lazyGString")]),t._v("也是一样的")]),t._v(" "),a("li",[t._v("注释 4 ：然后，我们将变量的值改为一个新的数字")]),t._v(" "),a("li",[t._v("注释 5 ：如果是普通的插值表达式，那么在创建 GString 的时候，这个值实际上已经被固定了")]),t._v(" "),a("li",[t._v("注释 6 ：但如果是使用闭包表达式的话，每次修改变量值时都会调用闭包，其字符串值也会进行更新。")])]),t._v(" "),a("p",[t._v("嵌入式闭包表达式如果接收一个以上的参数，会在运行时产生异常。因此只闭包表达式只能接收零或一个参数。")]),t._v(" "),a("h4",{attrs:{id:"_4-4-3-与-java-的互操作性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-3-与-java-的互操作性"}},[t._v("#")]),t._v(" 4.4.3 与 Java 的互操作性")]),t._v(" "),a("p",[t._v("当一个方法（不管是在 Java 还是 Groovy 中实现的）期望一个"),a("code",[t._v("java.lang.String")]),t._v("，但我们传递的是"),a("code",[t._v("groovy.lang.GString")]),t._v("实例时，GString 的"),a("code",[t._v("toString()")]),t._v("方法会被隐式调用。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("String "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 4")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 5")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" message\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"The message is '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GString")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("takeString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The message is hello'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：创建一个 GString 变量")]),t._v(" "),a("li",[t._v("注释 2：检查它是一个 GString 变量")]),t._v(" "),a("li",[t._v("注释 3 ：然后将该 GString 传递给一个以 String 为参数的方法")]),t._v(" "),a("li",[t._v("注释 4 ："),a("code",[t._v("takeString()")]),t._v("方法的定义明确表示它的唯一参数是一个字符串")]),t._v(" "),a("li",[t._v("注释 5：验证了参数确实是一个字符串，而不是一个 GString")])]),t._v(" "),a("h4",{attrs:{id:"_4-4-4-gstring-和-string-hashcodes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-4-4-gstring-和-string-hashcodes"}},[t._v("#")]),t._v(" 4.4.4 GString 和 String hashCodes")]),t._v(" "),a("p",[t._v("虽然插值字符串可以代替 Java 字符串，但它们与字符串有一个特殊的区别：它们的 hashCodes 不同。Java 字符串是不可改变的，而 GString 的结果 String 表示可以根据其插值的不同而变化。即使对于相同的结果字符串，GStrings 和 Strings 的HashCode 也不一样。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"one: '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"one: 1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("GString 和 Strings 具有不同的 hashCode 值，因此应该避免使用 GString 作为 Map Key，特别是当我们试图用 String 而不是 GString 来检索关联值时。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"a"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"'),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"letter '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v('"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null                   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：这个 Map 使用一个 GString 作为 Key 创建")]),t._v(" "),a("li",[t._v("注释 2 ：当试图用 String Key 来获取值时，会获取不到，因为 Strings 和 GString 有不同的 hashCode 值")])]),t._v(" "),a("h3",{attrs:{id:"_4-5-三个双引号的字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-5-三个双引号的字符串"}},[t._v("#")]),t._v(" 4.5 三个双引号的字符串")]),t._v(" "),a("p",[t._v("三个引号的字符串的行为和双引号字符串一样，只是它们和三个单引号的字符串一样是多行的。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Groovy'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" template "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"""\n    Dear Mr '),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(',\n\n    You\'re the winner of the lottery!\n\n    Yours sincerly,\n\n    Dave\n"""')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Groovy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("在三个双引号的字符串中，双引号和单引号都不需要转义。")]),t._v(" "),a("h3",{attrs:{id:"_4-6-斜杠字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-斜杠字符串"}},[t._v("#")]),t._v(" 4.6 斜杠字符串")]),t._v(" "),a("p",[t._v("除了常用的引号字符串，Groovy 还提供了使用"),a("code",[t._v("/")]),t._v("作为开头和结尾定界符的斜杠字符串。斜杠字符串对于定义正则表达式和模式特别有用，因为不需要转义反斜杠。")]),t._v(" "),a("p",[t._v("斜杠字符串的例子如下：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" fooPattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/.*foo.*/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" fooPattern "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.*foo.*'")]),t._v("\n")])])]),a("p",[t._v("只有正斜杠需要用反斜杠来转义：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" escapeSlash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/The character \\/ is a forward slash/")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" escapeSlash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'The character / is a forward slash'")]),t._v("\n")])])]),a("p",[t._v("斜杠字符串可以多行表示：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" multilineSlashy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("one\n    two\n    three"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" multilineSlashy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("斜杠字符串可以被认为是定义 GString 的另一种方式，但具有不同的转义规则。并且它们也是支持插值表达式的：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" color "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" interpolatedSlashy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string regex"}},[t._v("/a "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("color"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(" car/")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" interpolatedSlashy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a blue car'")]),t._v("\n")])])]),a("h4",{attrs:{id:"_4-6-1-特殊情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-6-1-特殊情况"}},[t._v("#")]),t._v(" 4.6.1 特殊情况")]),t._v(" "),a("p",[t._v("一个空的斜线字符串不能用双斜杠表示，因为 Groovy 解析器将其理解为行注释。这就是下面的断言不会被编译的原因，因为它看起来像一行没有结束语句：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//")]),t._v("\n")])])]),a("p",[t._v("由于斜杠字符串的设计主要是为了让正则更容易，所以一些在 GStrings 中出错的东西，如"),a("code",[t._v("$()")]),t._v("或"),a("code",[t._v("$5")]),t._v("，都可以用斜杠字符串来处理。")]),t._v(" "),a("p",[t._v("请记住，反斜杠不需要转义，或者说不支持转义。斜杠字符"),a("code",[t._v("/\\t/")]),t._v("不会是"),a("code",[t._v("\\t")]),t._v('，而是在字符 "t "后面加上一个反斜杠。转义只允许对斜线字符进行转义，即'),a("code",[t._v("/\\/folder/")]),t._v("将是一个值"),a("code",[t._v("/folder")]),t._v("的斜线字符串。斜杠转义的结果是，斜杠字符串不能以"),a("code",[t._v("\\")]),t._v("结束。否则，这将会转义斜杠字符串的结束符。你可以使用一个特殊的技巧，"),a("code",[t._v("/ends with slash ${'\\'}/")]),t._v("。但在这种情况下，最好的做法还是避免使用斜杠字符串。")]),t._v(" "),a("h3",{attrs:{id:"_4-7-美元符斜杠字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-美元符斜杠字符串"}},[t._v("#")]),t._v(" 4.7 美元符斜杠字符串")]),t._v(" "),a("p",[t._v("美元符斜杠字符串是以"),a("code",[t._v("$/")]),t._v("开头和"),a("code",[t._v("/$")]),t._v("结尾的多行 GStrings 。转义字符是美元符号，它可以转义另一个"),a("code",[t._v("$")]),t._v("或"),a("code",[t._v("/")]),t._v("。但是"),a("code",[t._v("$")]),t._v("和"),a("code",[t._v("/")]),t._v("都不需要转义，除非是转义一个字符串子序列的"),a("code",[t._v("$")]),t._v("，这个序列的开头是一个 GString 占位符序列，或者你需要转义一个序列，这个序列的开头是一个关闭的美元斜杠字符串定界符。")]),t._v(" "),a("p",[t._v("下面展示了一个例子：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"Guillaume"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"April, 1st"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" dollarSlashy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v("$/\n    Hello "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),t._v("name")]),t._v(",\n    today we're "),a("span",{pre:!0,attrs:{class:"token expression"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("$")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),t._v(".\n\n    $ dollar sign\n    $$ escaped dollar sign\n    \\ backslash\n    / forward slash\n    $/ escaped forward slash\n    $$$/ escaped opening dollar slashy\n    $/$$ escaped closing dollar slashy\n/$")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'April, 1st'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$ dollar sign'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$ escaped dollar sign'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\\\ backslash'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/ forward slash'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/ escaped forward slash'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$/ escaped opening dollar slashy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/$ escaped closing dollar slashy'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("every "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" dollarSlashy"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("它的创建是为了克服一些斜线字符串转义规则的限制。当它的转义规则适合你的字符串内容时，就可以使用它（通常是当它包含一些你不想转义的斜杠时）。")]),t._v(" "),a("h3",{attrs:{id:"_4-8-字符串总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-8-字符串总结"}},[t._v("#")]),t._v(" 4.8 字符串总结")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("字符串名称")]),t._v(" "),a("th",[t._v("语法")]),t._v(" "),a("th",[t._v("支持插值表达式")]),t._v(" "),a("th",[t._v("多行")]),t._v(" "),a("th",[t._v("转义字符")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("单引号字符串")]),t._v(" "),a("td",[a("code",[t._v("'...'")])]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("\\")])])]),t._v(" "),a("tr",[a("td",[t._v("三单引号字符串")]),t._v(" "),a("td",[a("code",[t._v("'''...'''")])]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[a("code",[t._v("\\")])])]),t._v(" "),a("tr",[a("td",[t._v("双引号字符串")]),t._v(" "),a("td",[a("code",[t._v('"..."')])]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td"),t._v(" "),a("td",[a("code",[t._v("\\")])])]),t._v(" "),a("tr",[a("td",[t._v("三双引号字符串")]),t._v(" "),a("td",[a("code",[t._v('"""..."""')])]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[a("code",[t._v("\\")])])]),t._v(" "),a("tr",[a("td",[t._v("斜杠字符串")]),t._v(" "),a("td",[a("code",[t._v("/.../")])]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[a("code",[t._v("\\")])])]),t._v(" "),a("tr",[a("td",[t._v("美元符斜杠字符串")]),t._v(" "),a("td",[a("code",[t._v("$/.../$")])]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[t._v("✔️")]),t._v(" "),a("td",[a("code",[t._v("$")])])])])]),t._v(" "),a("h3",{attrs:{id:"_4-9-字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-9-字符"}},[t._v("#")]),t._v(" 4.9 字符")]),t._v(" "),a("p",[t._v("与 Java 不同，Groovy 没有明确的字符文字（Java 使用单引号表示字符，双引号表示字符串；但 Groovy 中单引号和双引号均是字符串）。然而，你可以通过三种不同的方式，将 Groovy 字符串明确为一个实际的字符。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" c1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" c2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" c2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" c3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" c3 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Character")]),t._v("\n")])])]),a("ul",[a("li",[t._v("方法 1 ：显示指定 char 类型")]),t._v(" "),a("li",[t._v("方法 2 ：通过使用 as 操作符的类型转换法")]),t._v(" "),a("li",[t._v("方法 3 ：通过使用强转操作")])]),t._v(" "),a("p",[t._v("当字符被保存在一个变量中时，第一种方法更优，而当一个 char 值必须作为方法调用的参数传递时，其他两个选项（2和3）更好。")]),t._v(" "),a("h2",{attrs:{id:"_5-number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-number"}},[t._v("#")]),t._v(" 5. Number")]),t._v(" "),a("p",[t._v("Groovy支持不同类型的整数和小数，并有 Java 常用的 Number 类型支持。")]),t._v(" "),a("h3",{attrs:{id:"_5-1-整数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-整数"}},[t._v("#")]),t._v(" 5.1 整数")]),t._v(" "),a("p",[t._v("整数类型和 Java 一样：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("byte")])]),t._v(" "),a("li",[a("code",[t._v("char")])]),t._v(" "),a("li",[a("code",[t._v("short")])]),t._v(" "),a("li",[a("code",[t._v("int")])]),t._v(" "),a("li",[a("code",[t._v("long")])]),t._v(" "),a("li",[a("code",[t._v("java.lang.BigInteger")])])]),t._v(" "),a("p",[t._v("你可以用下面的声明创建这些类型的整数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// primitive types")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v("  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v("  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v("   i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v("  l "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// infinite precision")]),t._v("\nBigInteger bi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v("\n")])])]),a("p",[t._v("如果你通过使用"),a("code",[t._v("def")]),t._v("关键字来使用可选的输入法，那么数字的类型就会有所不同：它会自动选择合适的类型。")]),t._v(" "),a("p",[t._v("对于正数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Integer.MAX_VALUE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483647")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Integer.MAX_VALUE + 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483648")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Long.MAX_VALUE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9223372036854775807")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Long.MAX_VALUE + 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9223372036854775808")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" e "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v("\n")])])]),a("p",[t._v("对于负数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" na "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Integer.MIN_VALUE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483648")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" nb "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Integer.MIN_VALUE - 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483649")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" nc "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Long.MIN_VALUE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" nd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9223372036854775808")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" nd "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Long.MIN_VALUE - 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" ne "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9223372036854775809")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" ne "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v("\n")])])]),a("h4",{attrs:{id:"_5-1-1-其他进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-1-其他进制"}},[t._v("#")]),t._v(" 5.1.1 其他进制")]),t._v(" "),a("p",[t._v("数字也可以用二进制、八进制、十六进制和十进制来表示。")]),t._v(" "),a("h5",{attrs:{id:"二进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二进制"}},[t._v("#")]),t._v(" 二进制")]),t._v(" "),a("p",[t._v("二进制数字以"),a("code",[t._v("0b")]),t._v("前缀开始：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b10101111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("175")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" xShort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b11001001")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xShort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("201")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" xByte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b11")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xByte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" xLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b101101101101")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2925l")]),t._v("\n\nBigInteger xBigInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b111100100001")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xBigInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3873g")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xNegativeInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b10101111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xNegativeInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("175")]),t._v("\n")])])]),a("h5",{attrs:{id:"八进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八进制"}},[t._v("#")]),t._v(" 八进制")]),t._v(" "),a("p",[t._v("八进制以"),a("code",[t._v("0")]),t._v("作为前缀")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("077")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("63")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" xShort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("011")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xShort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" xByte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("032")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xByte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("26")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" xLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0246")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("166l")]),t._v("\n\nBigInteger xBigInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("01111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xBigInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("585g")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xNegativeInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("077")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xNegativeInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("63")]),t._v("\n")])])]),a("h5",{attrs:{id:"十六进制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十六进制"}},[t._v("#")]),t._v(" 十六进制")]),t._v(" "),a("p",[t._v("十六进制以"),a("code",[t._v("0x")]),t._v("作为前缀")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x77")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("119")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v(" xShort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xaa")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xShort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("170")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("short")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v(" xByte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x3a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xByte "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("byte")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" xLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xffff")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("65535l")]),t._v("\n\nBigInteger xBigInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xaaaa")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xBigInteger "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("43690g")]),t._v("\n\nDouble xDouble "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'0x1.0p0'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xDouble "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0d")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" xNegativeInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x77")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" xNegativeInt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("119")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-2-小数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-小数"}},[t._v("#")]),t._v(" 5.2 小数")]),t._v(" "),a("p",[t._v("小数类型与 Java 中相同：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("floagt")])]),t._v(" "),a("li",[a("code",[t._v("double")])]),t._v(" "),a("li",[a("code",[t._v("java.lang.BigDecimal")])])]),t._v(" "),a("p",[t._v("你可以通过以下声明创建这些类型的小数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// primitive types")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v("  f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.234")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.345")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// infinite precision")]),t._v("\nBigDecimal bd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.456")]),t._v("\n")])])]),a("p",[t._v("小数可以使用指数表达，指数字母为"),a("code",[t._v("e")]),t._v("或"),a("code",[t._v("E")]),t._v("，后面是正负号（可选），再跟着一个代表指数的整数：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1e3")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1_000.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2E4")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20_000.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3e+1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30.0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4E-2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.04")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5e-1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v("\n")])])]),a("p",[t._v("为了方便进行精确的小数计算，Groovy 选用"),a("code",[t._v("java.lang.BigDecimal")]),t._v("作为其十进制数类型。此外，"),a("code",[t._v("float")]),t._v("和"),a("code",[t._v("double")]),t._v("都被支持，但需要明确的类型声明、类型强转或使用[类型后缀](./### 5.4 数字类型后缀)。即使"),a("code",[t._v("BigDecimal")]),t._v("是十进制数的默认类型，在采用"),a("code",[t._v("float")]),t._v("或 "),a("code",[t._v("double")]),t._v("作为参数类型的方法或闭包中，也可以接受这种类型。")]),t._v(" "),a("p",[t._v("小数不能用二进制、八进制或十六进制表示。")]),t._v(" "),a("h3",{attrs:{id:"_5-3-下划线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-下划线"}},[t._v("#")]),t._v(" 5.3 下划线")]),t._v(" "),a("p",[t._v("在写长的文字数字时，眼睛比较难看出一些数字是如何分组的。可以在数字字面量中通过下划线"),a("code",[t._v("_")]),t._v("来进行区分：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" creditCardNumber "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234_5678_9012_3456L")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" socialSecurityNumbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("999_99_9999L")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" monetaryAmount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12_345_132.12")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" hexBytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFF_EC_DE_5E")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" hexWords "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFEC_DE5E")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" maxLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x7fff_ffff_ffff_ffffL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" alsoMaxLong "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9_223_372_036_854_775_807L")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" bytes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b11010010_01101001_10010100_10010010")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-4-数字类型后缀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-数字类型后缀"}},[t._v("#")]),t._v(" 5.4 数字类型后缀")]),t._v(" "),a("p",[t._v("我们可以通过给出一个后缀（见下表）来强制一个数字（包括二进制、八进制和十六进制）有一个特定的类型（后缀不区分大小写）。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("类型")]),t._v(" "),a("th",[t._v("后缀")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("BigInteger")]),t._v(" "),a("td",[a("code",[t._v("G")]),t._v("或"),a("code",[t._v("g")])])]),t._v(" "),a("tr",[a("td",[t._v("Long")]),t._v(" "),a("td",[a("code",[t._v("L")]),t._v("或"),a("code",[t._v("l")])])]),t._v(" "),a("tr",[a("td",[t._v("Integer")]),t._v(" "),a("td",[a("code",[t._v("I")]),t._v("或"),a("code",[t._v("i")])])]),t._v(" "),a("tr",[a("td",[t._v("BigDecimal")]),t._v(" "),a("td",[a("code",[t._v("G")]),t._v("或"),a("code",[t._v("g")])])]),t._v(" "),a("tr",[a("td",[t._v("Double")]),t._v(" "),a("td",[a("code",[t._v("D")]),t._v("或"),a("code",[t._v("d")])])]),t._v(" "),a("tr",[a("td",[t._v("Float")]),t._v(" "),a("td",[a("code",[t._v("F")]),t._v("或"),a("code",[t._v("f")])])])])]),t._v(" "),a("p",[t._v("举例：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42I")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'42'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42i")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'42'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lowercase i more readable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123L")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"123"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// uppercase L more readable")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2147483648")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2147483648'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Long type used, value too large for an Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("456G")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'456'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("456g")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'456'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123.45")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigDecimal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123.45'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// default BigDecimal type used")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.200065D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.200065'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.234F")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Float")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.234'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.23E23D")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1.23E23'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b1111L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Long "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// binary")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0xFFi")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" Integer "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hexadecimal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("034G")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" BigInteger "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// octal")]),t._v("\n")])])]),a("h3",{attrs:{id:"_5-5-数学运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-数学运算"}},[t._v("#")]),t._v(" 5.5 数学运算")]),t._v(" "),a("p",[t._v("虽然后面会讲到"),a("a",{attrs:{href:"http://www.groovy-lang.org/syntax.html#_operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("运算符"),a("OutboundLink")],1),t._v("，但讨论数学运算的行为以及它们的结果类型是什么很重要。")]),t._v(" "),a("p",[t._v("除法和幂运算暂不介绍（后文将介绍）。")]),t._v(" "),a("ul",[a("li",[t._v("在"),a("code",[t._v("byte")]),t._v("、"),a("code",[t._v("char")]),t._v("、"),a("code",[t._v("short")]),t._v("和"),a("code",[t._v("int")]),t._v("之间进行二元运算的结果是"),a("code",[t._v("int")])]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("long")]),t._v("与"),a("code",[t._v("byte")]),t._v("、"),a("code",[t._v("char")]),t._v("、"),a("code",[t._v("short")]),t._v("和"),a("code",[t._v("int")]),t._v("之间进行二元运算的结果是"),a("code",[t._v("long")])]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("BigInteger")]),t._v("和任何其他整数类型的二元运算结果是"),a("code",[t._v("BigInteger")])]),t._v(" "),a("li",[t._v("涉及"),a("code",[t._v("BigDecimal")]),t._v("的二元运算，有"),a("code",[t._v("byte")]),t._v("、"),a("code",[t._v("char")]),t._v("、"),a("code",[t._v("short")]),t._v("、"),a("code",[t._v("int")]),t._v("和"),a("code",[t._v("BigInteger")]),t._v("，结果是"),a("code",[t._v("BigDecimal")])]),t._v(" "),a("li",[t._v("在"),a("code",[t._v("float")]),t._v("、"),a("code",[t._v("double")]),t._v("和"),a("code",[t._v("BigDecimal")]),t._v("之间进行二元运算，结果是"),a("code",[t._v("double")])]),t._v(" "),a("li",[t._v("两个"),a("code",[t._v("BigDecimal")]),t._v("之间的二元运算结果为"),a("code",[t._v("BigDecimal")])])]),t._v(" "),a("p",[t._v("下表概述了这些规则：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th"),t._v(" "),a("th",[t._v("byte")]),t._v(" "),a("th",[t._v("char")]),t._v(" "),a("th",[t._v("short")]),t._v(" "),a("th",[t._v("int")]),t._v(" "),a("th",[t._v("long")]),t._v(" "),a("th",[t._v("BigInteger")]),t._v(" "),a("th",[t._v("float")]),t._v(" "),a("th",[t._v("double")]),t._v(" "),a("th",[t._v("BigDecimal")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("byte")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("long")]),t._v(" "),a("td",[t._v("BigInteger")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",[t._v("char")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("long")]),t._v(" "),a("td",[t._v("BigInteger")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",[t._v("short")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("long")]),t._v(" "),a("td",[t._v("BigInteger")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",[t._v("int")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("int")]),t._v(" "),a("td",[t._v("long")]),t._v(" "),a("td",[t._v("BigInteger")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",[t._v("long")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("long")]),t._v(" "),a("td",[t._v("BigInteger")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",[t._v("BigInteger")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("BigInteger")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("BigDecimal")])]),t._v(" "),a("tr",[a("td",[t._v("float")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")])]),t._v(" "),a("tr",[a("td",[t._v("double")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("double")]),t._v(" "),a("td",[t._v("double")])]),t._v(" "),a("tr",[a("td",[t._v("BigDecimal")]),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("BigDecimal")])])])]),t._v(" "),a("p",[t._v("由于 Groovy 的运算符重载，通常的算术运算符在"),a("code",[t._v("BigInteger")]),t._v("和"),a("code",[t._v("BigDecimal")]),t._v("中也能很好地工作，不像在 Java 中，你必须使用显式方法调用对这些数字进行操作。")]),t._v(" "),a("h4",{attrs:{id:"_5-5-1-除法运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-1-除法运算"}},[t._v("#")]),t._v(" 5.5.1 除法运算")]),t._v(" "),a("p",[t._v("如果操作数是"),a("code",[t._v("float")]),t._v("或"),a("code",[t._v("double")]),t._v("，除法运算符"),a("code",[t._v("/")]),t._v("（和"),a("code",[t._v("/=")]),t._v("用于除法和赋值）会产生一个"),a("code",[t._v("double")]),t._v("结果，否则会产生一个"),a("code",[t._v("BigDecimal")]),t._v("结果（当两个操作数都是"),a("code",[t._v("short")]),t._v("、"),a("code",[t._v("char")]),t._v("、"),a("code",[t._v("byte")]),t._v("、"),a("code",[t._v("int")]),t._v("、"),a("code",[t._v("long")]),t._v("、"),a("code",[t._v("BigInteger")]),t._v("或"),a("code",[t._v("BigDecimal")]),t._v("类型的任意组合）。")]),t._v(" "),a("p",[t._v("如果除法是精确的（即产生的结果可以在相同精度和比例的范围内表示），或者使用"),a("code",[t._v("MathContext")]),t._v("，"),a("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#precision()",target:"_blank",rel:"noopener noreferrer"}},[t._v("精度"),a("OutboundLink")],1),t._v("为两个操作数精度的最大值加上一个额外的10的精度，"),a("a",{attrs:{href:"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#scale()",target:"_blank",rel:"noopener noreferrer"}},[t._v("比例"),a("OutboundLink")],1),t._v("为10的最大值和操作数比例的最大值，则使用"),a("code",[t._v("divide()")]),t._v("方法进行"),a("code",[t._v("BigDecimal")]),t._v("除法。")]),t._v(" "),a("p",[t._v("对于像 Java 中的整数除法，你应该使用"),a("code",[t._v("intdiv()")]),t._v("方法，因为 Groovy 没有提供专门的整数除法运算符符号。")]),t._v(" "),a("h4",{attrs:{id:"_5-5-2-幂运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-2-幂运算"}},[t._v("#")]),t._v(" 5.5.2 幂运算")]),t._v(" "),a("p",[t._v("幂运算用"),a("code",[t._v("**")]),t._v("运算符表示，有两个参数：基数和指数。幂运算的结果取决于它的操作数和运算结果（特别是如果结果可以用积分值表示）。")]),t._v(" "),a("p",[t._v("Groovy 的幂运算使用以下规则来确定结果类型：")]),t._v(" "),a("ul",[a("li",[t._v("如果指数是小数\n"),a("ul",[a("li",[t._v("如果结果可以用"),a("code",[t._v("Integer")]),t._v("表示，则返回一个"),a("code",[t._v("Integer")])]),t._v(" "),a("li",[t._v("否则，如果结果可以用"),a("code",[t._v("Long")]),t._v("表示，则返回一个"),a("code",[t._v("Long")])]),t._v(" "),a("li",[t._v("否则返回一个"),a("code",[t._v("Double")])])])]),t._v(" "),a("li",[t._v("如果指数是整数\n"),a("ul",[a("li",[t._v("如果指数是严格的负数，那么返回一个"),a("code",[t._v("Integer")]),t._v("、"),a("code",[t._v("Long")]),t._v("或"),a("code",[t._v("Double")]),t._v("（如果结果值适合该类型）")]),t._v(" "),a("li",[t._v("如果指数是正数或零\n"),a("ul",[a("li",[t._v("如果基数是"),a("code",[t._v("BigDecimal")]),t._v("，则返回一个"),a("code",[t._v("BigDecimal")]),t._v("结果值")]),t._v(" "),a("li",[t._v("如果基数是"),a("code",[t._v("BigInteger")]),t._v("，则返回一个"),a("code",[t._v("BigInteger")]),t._v("结果值")]),t._v(" "),a("li",[t._v("如果基数是一个"),a("code",[t._v("Integer")]),t._v("，那么如果结果值适合，则返回一个"),a("code",[t._v("Integer")]),t._v("，否则返回一个"),a("code",[t._v("BigInteger")])]),t._v(" "),a("li",[t._v("如果基数是"),a("code",[t._v("Long")]),t._v("，结果合适的话，则返回一个"),a("code",[t._v("Long")]),t._v("，否则返回一个"),a("code",[t._v("BigInteger")])])])])])])]),t._v(" "),a("p",[t._v("我们可以用几个例子来说明这些规则：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// base and exponent are ints and the result can be represented by an Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  1_000_000_000")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the base is a long, so fit the result in a Long")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (although it could have fit in an Integer)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5L")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  25")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the result can't be represented as an Integer or Long, so return a BigInteger")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  10e20")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1234")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigInteger")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  170515806212727042875...")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the base is a BigDecimal and the exponent a negative int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but the result can be represented as an Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.5")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  4")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the base is an int, and the exponent a negative float")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but again, the result can be represented as an Integer")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.3f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the base is an int, and the exponent a negative int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but the result will be calculated as a Double")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// (both base and exponent are actually converted to doubles)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  0.1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the base is a BigDecimal, and the exponent is an int, so return a BigDecimal")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigDecimal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  6.1917364224")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the base is a float or double, and the exponent is an int")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// but the result can only be represented as a Double value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.4f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  454.35430372146965")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5.6d")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  31.359999999999996")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the exponent is a decimal value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// and the result can only be represented as a Double value")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7.8")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.9")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  49.542708423868476")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.1f")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Double")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//  1.0717734636432956")]),t._v("\n")])])]),a("h2",{attrs:{id:"_6-boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-boolean"}},[t._v("#")]),t._v(" 6. Boolean")]),t._v(" "),a("p",[t._v("布尔型是一种特殊的数据类型，用于表示真值："),a("code",[t._v("true")]),t._v("和"),a("code",[t._v("false")]),t._v("。使用这种数据类型来追踪真/假"),a("a",{attrs:{href:"%E5%B8%83%E5%B0%94%E5%9E%8B%E6%98%AF%E4%B8%80%E7%A7%8D%E7%89%B9%E6%AE%8A%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%EF%BC%8C%E7%94%A8%E4%BA%8E%E8%A1%A8%E7%A4%BA%E7%9C%9F%E5%80%BC%EF%BC%9A%E7%9C%9F%E5%92%8C%E5%81%87%E3%80%82%E4%BD%BF%E7%94%A8%E8%BF%99%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%9D%A5%E8%BF%BD%E8%B8%AA%E7%9C%9F/%E5%81%87%E6%9D%A1%E4%BB%B6%E7%9A%84%E7%AE%80%E5%8D%95%E6%A0%87%E5%BF%97%E3%80%82"}},[t._v("条件")]),t._v("的简单标志。")]),t._v(" "),a("p",[t._v("布尔值可以存储在变量中，指定到字段中，就像任何其他数据类型一样：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" myBooleanVariable "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" untypedBooleanVar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\nbooleanField "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])]),a("p",[a("code",[t._v("true")]),t._v("和"),a("code",[t._v("false")]),t._v("是唯一的两个原始布尔值。但更复杂的布尔表达式可以用"),a("a",{attrs:{href:"http://www.groovy-lang.org/syntax.html#_bitwise_and_logical_operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("逻辑运算符"),a("OutboundLink")],1),t._v("来表示。")]),t._v(" "),a("p",[t._v("此外，Groovy 有"),a("a",{attrs:{href:"https://docs.groovy-lang.org/latest/html/documentation/core-semantics.html#Groovy-Truth",target:"_blank",rel:"noopener noreferrer"}},[t._v("特殊的规则"),a("OutboundLink")],1),t._v("（通常被称为 Groovy Truth ），用于将非布尔对象转换为布尔值。")]),t._v(" "),a("h2",{attrs:{id:"_7-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-list"}},[t._v("#")]),t._v(" 7. List")]),t._v(" "),a("p",[t._v("Groovy 使用逗号分隔 List 的值，并用方括号括起来。Groovy 的 List 是 "),a("code",[t._v("java.util.List")]),t._v("，因为Groovy没有定义自己的集合类。在定义 List 变量时使用的具体列表实现默认是"),a("code",[t._v("java.util.ArrayList")]),t._v("，除非你另行指定（后面会介绍）。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1   ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" numbers "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：以逗号为分隔符，并用方括号括起来定义一个 List，并将该 List 赋值到一个变量中")]),t._v(" "),a("li",[t._v("注释 2 ：该 List 是 Java 的 "),a("code",[t._v("java.util.List")]),t._v("接口的一个实例")]),t._v(" "),a("li",[t._v("注释 3 ：List 的长度可以用"),a("code",[t._v("size()")]),t._v("方法查询，显示该 List 包含3个元素")])]),t._v(" "),a("p",[t._v("在上面的例子中，我们使用的是元素类型相同的列表，你也可以创建元素类型不同的列表：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" heterogeneous "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string gstring"}},[t._v('"a"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：\t该 List 中包含一个数字、一个字符串和一个布尔值")])]),t._v(" "),a("p",[t._v("上文提到，在默认情况下，List 实际上是"),a("code",[t._v("java.util.ArrayList")]),t._v("的实例，但可以使用"),a("code",[t._v("as")]),t._v("操作符实现类型强转，或者进行显式类型声明，都可以让 List 支持不同的类型：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" arrayList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" arrayList "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ArrayList")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" linkedList "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" LinkedList    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" linkedList "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LinkedList")]),t._v("\n\nLinkedList otherLinked "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2        ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" otherLinked "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LinkedList")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：使用"),a("code",[t._v("as")]),t._v("操作符将类型强转为"),a("code",[t._v("java.util.LinkedList")])]),t._v(" "),a("li",[t._v("注释 2 ：显示声明类型为 "),a("code",[t._v("LinkedList")])])]),t._v(" "),a("p",[t._v("你可以用"),a("code",[t._v("[]")]),t._v("下标操作符访问列表中的元素（无论是读值还是设值），负数表示从列表末尾访问元素。也可以用范围来访问，并使用"),a("code",[t._v("<<")]),t._v("左移操作符将元素追加到列表中：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" letters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'c'")]),t._v("\n\nletters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),t._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),t._v("\n\nletters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),t._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" letters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("..")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'C'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'e'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 6")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：访问列表的第一个元素(从 0 开始)")]),t._v(" "),a("li",[t._v("注释 2 ：访问列表的最后一个元素。-1 表示列表最后一个元素")]),t._v(" "),a("li",[t._v("注释 3 ：为列表的第三个元素设置一个新的值")]),t._v(" "),a("li",[t._v("注释 4 ：使用"),a("code",[t._v("<<")]),t._v("左移操作符在列表末尾添加一个元素")]),t._v(" "),a("li",[t._v("注释 5 ：同时访问两个元素，返回一个包含这两个元素的新列表")]),t._v(" "),a("li",[t._v("注释 6 ：使用一个范围从列表中访问一个范围的值，从开始到结束的元素位置")])]),t._v(" "),a("p",[t._v("由于列表可以是异构的，所以列表也可以包含其他列表，以创建多维列表：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" multi "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" multi"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2 ")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1 ：定义一个嵌套的数字列表")]),t._v(" "),a("li",[t._v("注释 2 ：访问最外层列表的第二个元素的第一个元素")])]),t._v(" "),a("h2",{attrs:{id:"_8-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-arrays"}},[t._v("#")]),t._v(" 8. Arrays")]),t._v(" "),a("p",[t._v("Groovy 为定义数组也是使用和 List 一样的中括号和逗号，但要使它成为数组而不是列表，需要通过强制类型转换或显式类型声明来明确定义数组的类型。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" arrStr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Ananas'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Banana'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Kiwi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" arrStr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrStr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" numArr "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" numArr "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" numArr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：使用显式类型声明定义数组")]),t._v(" "),a("li",[t._v("注释 2：断言``arrStr`是一个 String 数组")]),t._v(" "),a("li",[t._v("注释 3：使用 "),a("code",[t._v("as")]),t._v("操作符创建一个数组")]),t._v(" "),a("li",[t._v("注释 4：断言"),a("code",[t._v("numArr")]),t._v("是一个 int 数组")])]),t._v(" "),a("p",[t._v("你也可以创建多维数组：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" matrix3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1      ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" matrix3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n\nInteger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" matrix2               "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\nmatrix2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" matrix2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：你可以定义一个数组的大小")]),t._v(" "),a("li",[t._v("注释 2：也可以不指定数组大小")])]),t._v(" "),a("p",[t._v("访问数组元素的方法与访问列表的方法相同：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cédric'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Jochen'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Paul'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Cédric'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1    ")]),t._v("\n\nnames"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blackdrag'")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" names"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Blackdrag'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：访问数组的第一个元素")]),t._v(" "),a("li",[t._v("注释 2：给数组的第三个元素设置一个新值")])]),t._v(" "),a("p",[t._v("Groovy 不支持使用大括号初始化数组，因为大括号会和 Groovy 的闭包产生歧义。")]),t._v(" "),a("h3",{attrs:{id:"_8-1-java-风格的数组初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-1-java-风格的数组初始化"}},[t._v("#")]),t._v(" 8.1  Java 风格的数组初始化")]),t._v(" "),a("p",[t._v("Groovy 一直支持使用方括号定义列表和数组，并避免使用 Java 风格的大括号，以免与闭包定义冲突。然而，如果大括号紧跟在数组类型声明之后，则不会与闭包定义产生歧义，所以现在也支持用 Java 风格的方式定义数组。")]),t._v(" "),a("p",[t._v("举个栗子：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" primes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" primes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" primes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" primes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[I'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" pets "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dog'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" pets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'catdog'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" pets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[Ljava.lang.String;'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// traditional Groovy alternative still supported")]),t._v("\nString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" groovyBooks "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Groovy in Action'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Making Java Groovy'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" groovyBooks"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("every"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" it"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("contains")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Groovy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"_9-maps"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-maps"}},[t._v("#")]),t._v(" 9. Maps")]),t._v(" "),a("p",[t._v("在其他语言中有时也叫字典或关联数组，Groovy 将其称作 Map。Map 将 Key 与 Value 关联起来，用冒号分隔 Key 和 Value ，每个 key/value 对用逗号分隔，整个键和值用方括号包围。")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" colors "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("red"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#FF0000'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" green"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#00FF00'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" blue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#0000FF'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'red'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#FF0000'")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("green  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#00FF00'")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n\ncolors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'pink'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#FF00FF'")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 4")]),t._v("\ncolors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("yellow  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#FFFF00'")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 5")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pink "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#FF00FF'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'yellow'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'#FFFF00'")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" colors "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("LinkedHashMap")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：定义一个颜色名称和色值对应的 Map")]),t._v(" "),a("li",[t._v("注释 2：在中括号填入 key 来访问与其相关联的值")]),t._v(" "),a("li",[t._v("注释 3：使用"),a("code",[t._v(".")]),t._v("操作符访问与 key 相关联的值")]),t._v(" "),a("li",[t._v("注释 4：使用方括号来设置值")]),t._v(" "),a("li",[t._v("注释 5：使用"),a("code",[t._v(".")]),t._v("操作符设置值")])]),t._v(" "),a("p",[t._v("上面的例子中使用 key 时，实际上是在 Map 中定义的是字符串类型的 key")]),t._v(" "),a("p",[t._v("Groovy 创建的 Map 实际上是"),a("code",[t._v("java.util.LinkedHashMap")]),t._v("的实例。")]),t._v(" "),a("p",[t._v("如果你尝试访问一个 Map 中不存在的 key 时：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" colors"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unknown "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" null\n")])])]),a("p",[t._v("你会得到一个"),a("code",[t._v("null")])]),t._v(" "),a("p",[t._v("在上面的例子中，我们使用了字符串类型的 key，你也可以使用其他类型的值作为 key")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'two'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),t._v("\n")])])]),a("p",[t._v("在这里，我们使用 Number 类型的值作为 key ，因为 Number 可以确切地被识别为数字，所以 Groovy 不会像我们之前的例子那样创建一个字符串类型的 key。如果你想传递一个变量来代替 key，让这个变量的值成为 key：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("      "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：这里的"),a("code",[t._v("key")]),t._v("实际上是一个字符串"),a("code",[t._v("key")]),t._v("，而不是变量"),a("code",[t._v("key")]),t._v("的值")]),t._v(" "),a("li",[t._v("注释 2：这个 Map 没有 "),a("code",[t._v("name")]),t._v("这个key")]),t._v(" "),a("li",[t._v("注释 3：相反，这个 Map 包含一个值为"),a("code",[t._v('"key"')]),t._v("的key")])]),t._v(" "),a("p",[t._v('你也可以传递带引号的字符串作为 key：["name": "Guillaume"]. 如果你传递的作为 key 的字符串不是一个有效的标识符，就必须加上引号。例如，你想创建一个包含哈希值的字符串类型的 key，比如：["street-name": "Guillaume"]')]),t._v(" "),a("p",[t._v("当你需要在 Map 中传递变量值作为 key 时，你必须用小括号将变量或表达式括起来：")]),t._v(" "),a("div",{staticClass:"language-groovy extra-class"},[a("pre",{pre:!0,attrs:{class:"language-groovy"}},[a("code",[t._v("person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Guillaume'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 1")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("containsKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 注释 3")]),t._v("\n")])])]),a("ul",[a("li",[t._v("注释 1：用小括号将 key 括起来，以指示解析器我们传递的是一个变量，而不是定义一个字符串 key")]),t._v(" "),a("li",[t._v("注释 2：Map 中值 "),a("code",[t._v('"name"')]),t._v("的 key")]),t._v(" "),a("li",[t._v("注释 3：Map 中没有值为"),a("code",[t._v('"key"')]),t._v("的 key")])])])}),[],!1,null,null,null);s.default=n.exports}}]);